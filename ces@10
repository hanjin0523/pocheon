import socket
import pickle
import struct
import threading
import time
import random
import math
import minimalmodbus as minimalmodbus

ip = "10.211.55.4"



class CarbonIface(object):

    class Fields:
        temperature = 0.0
        humidity = 0.0
        atmosphericPressure = 0.0
        amountSnowfall = 0.0
        roadTemperature = 0.0 
        freezingPoint = 0.0
        waterFilmThickness = 0.0
        snowHeight = 0.0
        iceRatio = 0.0
        coefficientOfFriction = 0.0
        roadConditions = 0.0 
        signalStrength = 0.0

    def __init__(self, host, port, event_url=None):
        self.host = host
        self.port = port
        self.event_url = event_url
        self.__data = []
        self.__data_lock = threading.Lock()

    def add_data(self, metric, value, ts=None):
        if not ts:
            ts = time.time()
        if self.__data_lock.acquire():
            self.__data.append((metric, (ts, value)))
            self.__data_lock.release()
            return True
        return False

    def add_data_dict(self, dd):
        if self.__data_lock.acquire():
            for k, v in dd.items():
                ts = v.get("ts", time.time())
                value = v.get("value")
                self.__data.append((k, (ts, value)))
            self.__data_lock.release()
            return True
        return False

    def add_data_list(self, dl):
        if self.__data_lock.acquire():
            self.__data.extend(dl)
            self.__data_lock.release()
            return True
        return False

    def send_data(self, data=None):
        save_in_error = False

        if not data:
            if self.__data_lock.acquire():
                data = self.__data
                self.__data = []
                save_in_error = True
                self.__data_lock.release()
            else:
                return False

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        payload = pickle.dumps(data)
        header = struct.pack("!L", len(payload))
        message = header + payload

        s.connect((self.host, self.port))

        try:
            s.send(message)
        except:
            print("Error when sending data to carbon")
            if save_in_error:
                self.__data.extend(data)
            return False
        else:
            print('Sent data to {host}:{port}: {0} metrics, {1} bytes'.format(len(data), len(message), host = self.host, port=self.port))
            return True
        finally:
            s.close()

while True:
    time.sleep(10)
    def sendData():
            fields = ['temperature','humidity','atmosphericPressure','amountSnowfall','roadTemperature','freezingPoint','waterFilmThickness','snowHeight','iceRatio','coefficientOfFriction','roadConditions','signalStrength']
            carbon = CarbonIface(ip, 2004)
            datas = []
            for i in fields:
                    if i == "roadConditions":
                        test = random.uniform(0,0.7)*10
                        datas.append(round(test, 0))
                        print(round(test, 0))
                    elif i == "signalStrength":
                        test = 0
                        datas.append(test)
                        print(test,"=========0  , 1 의값 ===========")
                    elif i == "temperature":
                        test = random.uniform(-0.2,1.6)*10
                        datas.append(round(test, 0))
                    else:
                        datas.append(random.uniform(0,1)*10)
                        
            ts = time.time()
            for i in range(0,len(fields)):
                if fields[i] == '1':
                    carbon.add_data("FAKE." + fields[i], -300, ts)
                    print("에러확인")
                else:
                    carbon.add_data("FAKE." + fields[i], datas[i], ts)
            carbon.send_data()
            print(datas)
            return datas
    sendData()

def get_data():###########-300, -200 등 에러 잡는 로직 (예외 처리))
    # while True:
    #     time.sleep(2)
        map_addr = 0
        hex_addr = 0
        report_data = []
        test_float = 0.0
        for i in range(1, 13):
            map_addr = i * 2 - 1
            hex_addr = map_addr - 1
            test_float = (random.uniform(0,1)*10)
            print(test_float,i,"-1번테스트")
            if test_float < 5 :
                while test_float < 9:
                    print(i,"while문도는중...")
                    test_float = (random.uniform(0,1)*10)
            report_data.append({'register': map_addr + 30000, 'value': test_float})
        # report_data.append({'register': map_addr + 30000, 'value': test_float})
        print(test_float,"2번테스트")
        print(report_data)
# get_data()


def get_data1():###########-300, -200 등 에러 잡는 로직 (예외 처리))
    map_addr = 0
    hex_addr = 0
    report_data = []
    test_float = 0.0
    for i in range(1, 13):
        map_addr = i * 2 - 1
        hex_addr = map_addr - 1
        test_float = (random.uniform(0,1)*10)
        test_float1 = test_float
        if test_float > 2:
            report_data.append(test_float)
        else:
            report_data.append(test_float1)
    print(report_data)    
    print(test_float1)
    print(test_float1)
    print(test_float1)
# get_data1()

class errorTest11(Exception):
    def __init__(self):
        super().__init__('에러메세지')

class DataLogger(object):
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, "_instance"):         # Foo 클래스 객체에 _instance 속성이 없다면
            print("__new__ is called\n")
            cls._instance = super().__new__(cls)  # Foo 클래스의 객체를 생성하고 Foo._instance로 바인딩
        return cls._instance                      # Foo._instance를 리턴

    def __init__(self, data):
        cls = type(self)
        if not hasattr(cls, "_init"):             # Foo 클래스 객체에 _init 속성이 없다면
            print("__init__ is called\n")
            self.data = data
            cls._init = True
    
    class NotThreeMultipleError(Exception):
        def __init__(self):
            super().__init__('3의 배수가 아닙니다.')
    

    
    def three_multiple():
        read_three = []
        read_real = []
        try:
            x = int(input('3의 배수를 입력하세요:  '))
            if x % 3 != 0:
                raise NotADirectoryError
            print(x)
            read_three.append(x)
        except Exception as e:
            read_real.append(x)
            print('예외가 발생했습니다.', e)
        print(read_three,"3의배수")
        print(read_real,"3의배수가 아닌것")

def get_data_passing():###########-300, -200 등 에러 잡는 로직 (예외 처리))
    # while True:
    #     time.sleep(2)
        map_addr = 0
        hex_addr = 0
        report_data = []
        report_data1 = []
        test_float = 0.0
        for i in range(1, 13):
            map_addr = i * 2 - 1
            try:
                test_float = (random.randint(1,10)*10)
                print(test_float,i,"-1번테스트")
                report_data.append({'register': map_addr + 30000, 'value': test_float})
                for n in report_data:
                    print(ModuleNotFoundError)
                if test_float < 50:
                    raise ValueError
            except Exception as e:
                report_data1.append({'register': map_addr + 30000, 'value': test_float})
                while report_data1[5] >= 50:
                    test_float1 = (random.randint(1,10)*10)
                print(test_float1,"새로운값")
                # if test_float1 > test_float:
                #     test_float = test_float1
        # print(test_float,"2번테스트")
        print(report_data,"5이상의 데이터")
        print(report_data1,"5이하의 데이터")
# get_data_passing()